(def constant BV_VISIBILITY_PREF_NAME 'buildViewer_showBuildViewer')
(def constant TT_BUILDVIEWER_INSTALLED "true")

(def constant BV_ELEMENT_SIZE {
	WIDTH: 20,
	HEIGHT: 100
})
(def constant BV_ELEMENT_NAME 'buildViewer')
(def constant BV_COMPONENT_KEY_BUILDS 'modBuildViewerBuilds')
(def constant BV_COMPONENT_KEY_TARGET 'modBuildViewerTarget')

(def element BuildViewer () layout=true
	(scope
		# Stage
		(macro STAGE_SIZE)

		# Userpref
		(var userPrefsComponent:gfx = "$datahub.getSingleComponent(CC.userPrefs)")
		(var userPrefs:gfx = "userPrefsComponent.userPrefs" (event "userPrefsComponent.evUserPrefsChanged"))
		(var userPrefsBool:gfx = "userPrefs.elementsGroupExpand")
		(var _userPrefsNum:gfx = "userPrefs.chatBoxWidth")

		# Builds Entity
		(var buildsEntityWatcher:gfx = "$datahub.getPrimWatcher(CC.mods_DataComponent, BV_COMPONENT_KEY_BUILDS)")
		(var buildsEntity:gfx = "buildsEntityWatcher.entity" (event "buildsEntityWatcher.event"))
		(var buildsDataComponent:gfx = "buildsEntity ? buildsEntity.mods_DataComponent : null" (event "buildsEntity.evAdded"))
		(var buildsData:dict = "buildsDataComponent ? buildsDataComponent.data : {}" (event "buildsDataComponent.evDataChanged"))

		# Target Entity
		(var targetEntityWatcher:gfx = "$datahub.getPrimWatcher(CC.mods_DataComponent, BV_COMPONENT_KEY_TARGET)")
		(var targetEntity:gfx = "targetEntityWatcher.entity" (event "targetEntityWatcher.event"))
		(var targetDataComponent:gfx = "targetEntity ? targetEntity.mods_DataComponent : null" (event "targetEntity.evAdded"))
		(var targetData:dict = "targetDataComponent ? targetDataComponent.data : {}" (event "targetDataComponent.evDataChanged"))
		(var targetVehicleId:str = "'vehicleId' in targetData ? toString(targetData.vehicleId) : ''")

		# Hide Ally Builds?
		(macro TT_GET_PREF_BOOL		_varName="'isOwnBuildOnlyPref'"	_pref="BV_PREFS.DISABLE_ALLY_BUILDS")
		(macro IS_SPECTATOR_MODE)
		(var isOwnBuildOnly:bool = "!isSpectatorTrainingMode && isOwnBuildOnlyPref")
		(var playerEntity:gfx = "$datahub.getSingleEntity(CC.playerAvatar)")
		(var ownVehicleId:str = "playerEntity ? toString(playerEntity.vehicle.id) : ''")
		(var targetId:str = "isOwnBuildOnly ? ownVehicleId : targetVehicleId")

		(var buildData:dict = "targetId in buildsData ? buildsData[targetId] : {}")

		(var vehicleId:number = "'vehicleId' in buildData ? buildData.vehicleId : -1")
		(var skills:array = "'skills' in buildData ? buildData.skills : []")
		(var modernizations:array = "'modernizations' in buildData ? buildData.modernizations : []")
		(var signals:array = "'signals' in buildData ? buildData.signals : []")

		# Show/Hide Button
		(event evVisibilityButtonClicked)
		(var viewersVisibility:bool = "isBool(userPrefsBool[BV_VISIBILITY_PREF_NAME]) ? userPrefsBool[BV_VISIBILITY_PREF_NAME] : false" watch=false)
		(bind viewersVisibility "$event.value" watch=false init=false (event "evVisibilityButtonClicked"))
		(bindcall externalCall 'inputMapping.onAction' "['setUserPref', {'value': $event.value, 'name': 'elementsGroupExpand', 'subName': BV_VISIBILITY_PREF_NAME}]" init=false watch=false (event "evVisibilityButtonClicked"))
		(macro SIMPLE_MOUSE_OVER_DOWN_SELECTED_COLORTRANSFORM_SCOPE)
		(var arrowDirection:str = "viewersVisibility ? 'left' : 'right'")

		# Numbers
		(macro TT_GET_PREF_NUMBER	_varName="'scale'" 				_pref="BV_PREFS.SCALE")
		(macro TT_GET_PREF_NUMBER	_varName="'backgroundAlpha'"	_pref="BV_PREFS.BACKGROUND_ALPHA")

		# Drag/Drop
		(macro TT_GET_PREF_BOOL		_varName="'isPositionLocked'"	_pref="BV_PREFS.DISABLE_DRAGDROP")
		(var defaultPos:dict = "{'positionX': 290, 'positionY': (stageHeight - 400)}")
		(macro DRAGGABLE_GET_DROP_POSITION _wndName="BV_ELEMENT_NAME" _defaults="defaultPos")
	)

	(element TT_ConfigButtonElement _modIndex="10" _tooltipAlign="outerTop|outerLeft"
		(style
			(bind top "dragPosY - 27")
			(bind left "dragPosX")
		)
	)
	(hblock
		(style
			(position = "absolute")
			(bind left "dragPosX")
			(bind top "dragPosY")
			(bind scaleX "scale")
			(bind scaleY "scale")
		)
		# Show/Hide Button
		(block
			(controller $Instance renderer='ModDraggableElement'
				(bind enabled "!isPositionLocked")
				(args
					_wndName="BV_ELEMENT_NAME"
					_defaults="defaultPos"
					_elmSize="{width: BV_ELEMENT_SIZE.WIDTH + 10, height: BV_ELEMENT_SIZE.HEIGHT}"
				)
			)

			(block
				(dispatch evVisibilityButtonClicked args="{value: !viewersVisibility}" on='click')
				(macro SIMPLE_MOUSE_OVER_DOWN_SELECTED_COLORTRANSFORM "true")
				(block
					(style
						(width = "BV_ELEMENT_SIZE.WIDTH")
						(height = 31)
						(bind backgroundImage "'url:../service_kit/buttons/arrow_' + arrowDirection + '_down.png'")
					)
				)
				(style
					(align = "center|middle")
					(marginRight = 5)
					(marginLeft = 5)
					(width = "BV_ELEMENT_SIZE.WIDTH")
					(height = "BV_ELEMENT_SIZE.HEIGHT")
				)
			)
		)
		# Viewer
		(block
			(style
				(width = "400")
				(align = "center|middle")
			)
			(bind visible "viewersVisibility && targetId")

			(macro BV_ContrastPanel _alpha="backgroundAlpha")
			(element BV_NameElement "vehicleId")
			(macro BV_HorizontalDevider)
			(element BV_SkillsElement "skills")
			(macro BV_HorizontalDevider)
			(element BV_ModernizationsElement "modernizations")
			(macro BV_HorizontalDevider)
			(element BV_SignalsElement "signals")
		)
	)
)

(def element BV_NameElement(vehicleId:number) layout=true
	(scope
		#player name
		(var avatarEntity:gfx = "$datahub.getPrimaryEntity(CC.vehicleInfo, vehicleId)")
		(var avatarComponent:gfx = "avatarEntity ? avatarEntity.avatar : null")
		(var shipName:str = "avatarComponent ? avatarComponent.ship.ref.ship.nameUpper : ''")
		(var shipType:str = "avatarComponent ? avatarComponent.ship.ref.ship.subtype : ''")
		(var avatarName:str = "avatarComponent ? avatarComponent.name : ''")
	)
	(hblock
		(element BV_NameTextItem "avatarName")
		(element ShipIcon "shipType")
		(element BV_NameTextItem "shipName")
	)
	(style
		(padding = [6, 5, 6, 0])
	)
)

(def element BV_NameTextItem(value:str) layout=true
	(style
		(margin = [6, 6, 6, 6])
	)
	(tf
		(class $TextDefaultBold17NM)
		(bind text "value")
	)
)

(def element BV_ModernizationsElement(modernizations:array) layout=true
	(hblock
		(controller $Repeat renderer='BV_ModernizationIconItem' layout=true
			(bind count "modernizations.length")
			(args "modernizations[$index]")
			#may have to convert index to str
		)
		(style
			(padding = [6, 6, 6, 6])
		)
	)
)

(def element BV_ModernizationIconItem(modernization:dict) layout=true
	(scope
		(var isInstalled:bool = "modernization ? true : false")
		(var iconPath:str = "isInstalled ? modernization.iconPath : 'url:../service_kit/frames/64px_not_empty_field.png'")
	)

	(style
		(width = 60px)
		(height = 60px)
		(margin = [2, 2, 2, 2])
	)

	(block
		(block
			#modernization icon
			(style
				(width = 60px)
				(height = 60px)
				(bind backgroundImage "iconPath")
				(backgroundSize = "fill")
			)
		)
	)
)

(def element BV_SkillsElement(skills:array) layout = true
	#crew skills
	(block
		(controller $Repeat renderer='BV_SkillsRowItem' layout=true
			(bind count "skills.length")
			(args "skills[$index]")
		)
		(style
			(padding = [6, 6, 6, 6])
		)
	)
)

(def element BV_SkillsRowItem(crewSkillRow:array) layout=true
	#skill row
	(hblock
		(controller $Repeat renderer='BV_SkillIconItem' layout=true
			(bind count "crewSkillRow.length")
			(args "crewSkillRow[$index]")
		)
	)
)

(def element BV_SkillIconItem(skill:dict) layout=true
	(scope
		(var isEpic:bool = "skill.isEpic")
		(var isLearned:bool = "skill.isLearned")
		(var iconPath:str = "skill.iconPath")
		#(var transform:dict = "isLearned ? {} : {redMultiplier: 0, greenMultiplier: 0, blueMultiplier: 0, redOffset: 130, greenOffset: 130, blueOffset: 130}")
		(var transform:dict = "isLearned ? {redOffset:0,greenOffset:-41,blueOffset:-153} : {redOffset: -100, greenOffset: -100, blueOffset: -100}")
	)

	(style
		(width = 60px)
		(height = 60px)
		(margin = [2, 2, 2, 2])
	)

	(block
		#skill icon
		(block
			(style
				(bind backgroundImage "iconPath")
			)
			(bind colorTransform "transform")
		)
		#epic icon
		(block
			(style
				(backgroundImage = "'url:../service_kit/item_types/icon_modernization_special.png'")
			)
			(bind visible "isEpic")
		)
	)
)

(def element BV_SignalsElement(signals:array)
	(hblock
		(controller $Repeat renderer='BV_SignalIconItem'
			(bind count "signals.length")
			(args "signals[$index]")
		)
		(style
			(padding = [6, 6, 6, 6])
		)
	)
)

(def element BV_SignalIconItem(signal:dict)
	(scope
		(var isInstalled:bool = "signal ? true : false")
		(var iconPath:str = "isInstalled ? signal.iconPath : 'url:../service_kit/frames/64px_not_empty_field.png'")
		(var signalId:number = "isInstalled ? signal.id : 0")
	)

	(style
		(width = 45px)
		(height = 45px)
		(margin = [1, 1, 1, 1])
		(bind backgroundImage "iconPath")
		(backgroundSize = "fill")
	)

	(controller $Tooltip
		(renderer = 'SignalTooltip')
		(args
			_signalId = "signalId"
			_amount = "0"
			_noMouseInstructions = "true"
			_isReward = "true"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR "0")
	)
)

(def macro BV_HorizontalDevider() layout=true
	(element HorizontalDivider
		(style
			(paddingLeft = 10)
			(paddingRight = 10)
			(alpha = 2)
		)
	)
)

(def macro BV_ContrastPanel(_alpha:expression) layout=true
	(mc contrast_panel
		(class $FullsizeAbsolute)
		(style
			(bind alpha "_alpha")
			(hitTest = false)
		)
	)
)